import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def player_move(board):
    while True:
        try:
            row, col = map(int, input("Enter your move (row and column): ").split())
            if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
                return row, col
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Enter two integers separated by a space.")

def ai_move(board):
    empty_cells = get_empty_cells(board)
    return random.choice(empty_cells)

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    player_turn = True

    while not is_winner(board, 'X') and not is_winner(board, 'O') and not is_board_full(board):
        print_board(board)

        if player_turn:
            row, col = player_move(board)
            board[row][col] = 'X'
        else:
            print("AI's move:")
            row, col = ai_move(board)
            board[row][col] = 'O'

        player_turn = not player_turn

    print_board(board)

    if is_winner(board, 'X'):
        print("Congratulations! You win!")
    elif is_winner(board, 'O'):
        print("AI wins!")
    else:
        print("It's a draw!")

if __name__ == "__main__":
    play_game()
